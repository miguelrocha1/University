package src.model;

import java.util.HashSet;
import java.util.ArrayList;
import java.util.Random;


/**
 * Dictionary class that extends HashSet<String> and contains the methods to generate the levels of the game.
 */
public class Dictionary extends HashSet<String> {


    public static final int MIN_WORD_LENGTH = 2; // Minimum number of letters in a word
    public static final int MAX_WORD_LENGTH = 8; // Maximum number of letters in a word
    public static final int MIN_WORDS_LEVEL = 3; // Minimum number of words to guess in a level
    public static final int MAX_WORDS_LEVEL = 6; // Maximum number of words to guess in a level

    private static final char[] PORTUGUESE_CONSONANTS = {
        'B', 'C', 'D', 'F', 'G', 'H', 'J', 'K', 'L', 'M', 'N', 'P', 'Q', 'R', 'S', 'T', 'V', 'W', 'X', 'Y', 'Z',
        'Ç'
    };

    private static final char[] PORTUGUESE_VOWELS = {
        'A', 'E', 'I', 'O', 'U'
    };

    private static final char[] PORTUGUESE_ACCENTED_VOWELS = {
        'Á', 'À', 'Â', 'Ã', 'É', 'Ê', 'Í', 'Ó', 'Ô', 'Õ', 'Ú'
    };


    /**
     * Constructor of the Dictionary class.
     */
    public Dictionary() {
        super();
    }


    /**
     * Method to generate random letters to be used in the levels of the game.
     * It generates a random number of letters between MIN_WORD_LENGTH and MAX_WORD_LENGTH.
     * The letters are picked randomly from the PORTUGUESE_CONSONANTS, PORTUGUESE_VOWELS and PORTUGUESE_ACCENTED_VOWELS arrays.
     * 
     * @return String[] with the random letters.
     */
    private String[] generateRandomLetters() {

        Random rd = new Random();
        int nLetters = rd.nextInt(MAX_WORD_LENGTH - MIN_WORD_LENGTH) + MIN_WORD_LENGTH;
        String[] letters = new String[nLetters];

        float chance = 0.8f; // 100% chance of being a vowel

        for (int i = 0; i < nLetters; i++) {
            if (chance < 0.5) {
                letters[i] = String.valueOf(PORTUGUESE_CONSONANTS[rd.nextInt(PORTUGUESE_CONSONANTS.length)]);
            } 
            else if (chance < 0.9) {
                letters[i] = String.valueOf(PORTUGUESE_VOWELS[rd.nextInt(PORTUGUESE_VOWELS.length)]);
            }
            else {
                letters[i] = String.valueOf(PORTUGUESE_ACCENTED_VOWELS[rd.nextInt(PORTUGUESE_ACCENTED_VOWELS.length)]);
            }
            chance = rd.nextFloat();
        }

        return letters;
    }


    /**
     * Method to generate random letters to be used in the levels of the game.
     * It generates a random number of letters between MIN_WORD_LENGTH and MAX_WORD_LENGTH.
     * The letters are picked randomly from a word in the dictionary.
     * 
     * @return String[] with the random letters.
     */
    private String[] generateRandomLetters_Dict () {
        Random rd = new Random();
        int index = rd.nextInt(this.size());
        String[] letters = null;

        for (String word: this) {
            if (index <= 0 && word.length() > MIN_WORD_LENGTH && word.length() < MAX_WORD_LENGTH) {
                letters = word.split("");
                break;
            }
            index--;
        }
        
        if (letters != null) {

            // Shuffle the letters
            for (int i = letters.length - 1; i > 0; i--) {
                int j = rd.nextInt(i + 1);
                // Swap array[i] with array[j]
                String temp = letters[i];
                letters[i] = letters[j];
                letters[j] = temp;
            }
        }
        // If there was no word found that satisfies the condition, generate random letters again
        else{
            letters = generateRandomLetters_Dict();
        }

        return letters;
    }


    /**
     * Method to generate a level of the game.
     * It generates a random number of words to guess between MIN_WORDS_LEVEL and MAX_WORDS_LEVEL.
     * The words are generated using the generateWordsToGuess method.
     * 
     * 
     * @param currentLevel The current level of the game.
     * @return Level with the generated level.
     */
    private Level generateLevel(int currentLevel) {
        Random rd = new Random();
        ArrayList<Word> wordsToGuess = new ArrayList<>(); // Words to guess in the level
        String[] letters = null;
        int nMaxWordsToGuess = 0;
        ArrayList<String> wordsList = new ArrayList<>(); // List of potential words to guess. Generated by generateWordsToGuess permutations
        
        while (wordsList.size() < MIN_WORDS_LEVEL) { // To avoid levels with less than MIN_WORDS_LEVEL words

            nMaxWordsToGuess = rd.nextInt(MAX_WORDS_LEVEL - MIN_WORDS_LEVEL) + MIN_WORDS_LEVEL;

            if (rd.nextFloat() < 0.5) {
                letters = generateRandomLetters();
            } 
            else {
                letters = generateRandomLetters_Dict();
            }
            
            wordsList = new ArrayList<>();

            for (int i = MIN_WORD_LENGTH; i <= letters.length; i++) {
                wordsList.addAll(generateWordsToGuess(letters, i));
            }
        }

        HashSet<Integer> usedIndices = new HashSet<>(); // To avoid using repeated words in the level
        int i = 0, random = wordsList.size() - 1;

        while(i < nMaxWordsToGuess){ 
            if(usedIndices.size() >= wordsList.size()){
                break;
            }

            if(!usedIndices.contains(random)){
                usedIndices.add(random);
                wordsToGuess.add(new Word(wordsList.get(random)));
                i++;
            }

            random = rd.nextInt(wordsList.size());
        }

        return new Level(currentLevel + 1, wordsToGuess, letters);
    }


    /**
     * Wrapper method to generate the words to guess in a level.
     * It generates all the possible permutations of the letters in the array.
     * Sets up all the necessary variables to call the generatePermutations method.
     * 
     * @param letters The array of letters to generate the words.
     * @param wordLength The length of the words to generate.
     * @return ArrayList<String> with the generated words.
     */
    private ArrayList<String> generateWordsToGuess(String[] letters, int wordLength) {
        ArrayList<String> validWords = new ArrayList<>();
        boolean[] used = new boolean[letters.length];
        generatePermutations(letters, "", wordLength, used, validWords);
    
        return validWords;
    }


    /**
     * Method to generate the permutations of the letters in the array.
     * It uses a recursive backtracking algorithm to generate the permutations.
     * When the current word has the desired length, it checks if it is a valid word and adds it to the validWords list.
     * 
     * 
     * @param letters
     * @param current
     * @param wordLength
     * @param used
     * @param validWords
     */
    private void generatePermutations(String[] letters, String current, int wordLength, boolean[] used, ArrayList<String> validWords) {
        // Base case: if the current word has the desired length, check if it is a valid word and add it to the validWords list
        if (current.length() == wordLength) {
            // Check if the current word is a valid word and if it is not already in the validWords list
            if (this.contains(current) && !validWords.contains(current)) { // To avoid repeated words
                validWords.add(current);
            }
            return;
        }
    
        // Generate permutations: for each letter, if it is not used, add it to the current word and call the function recursively
        for (int i = 0; i < letters.length; i++) {
            if (!used[i]) {
                used[i] = true;
                generatePermutations(letters, current + letters[i], wordLength, used, validWords);
                used[i] = false;
            }
        }
    }


    /**
     * Method to generate the levels of the game.
     * It generates nLevels levels starting from the currentLevel.
     * 
     * @param nLevels The number of levels to generate.
     * @param currentLevel The current level of the game.
     * @return ArrayList<Level> with the generated levels.
     */
    public ArrayList<Level> generateLevels(int nLevels, int currentLevel) {
        ArrayList<Level> levels = new ArrayList<>();
        int nLevelsToGenerate = nLevels + currentLevel;
        for(int i = currentLevel; i < nLevelsToGenerate; i++){
            levels.add(generateLevel(i));
        }
        return levels;
    }
        
}